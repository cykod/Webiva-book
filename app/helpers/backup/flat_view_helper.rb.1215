module  FlatViewHelper

  class ActiveTreeBuilder
    def initialize(element,tpl,options={})
      @opts = options
      @template = tpl
      @element = element
    end

    def child(obj,level=1)
      returning html = '' do
       html << "\n<#{@opts[:leaf_tg]} class='#{@opts[:leaf_clss]}' id='#{@element}_#{obj.id}'>"
      html << "#{'<span class=\'handle\'></span>' unless @opts[:no_handle]}<a class='#{@opts[:leaf_content_clss]}' href='javascript:void(0);' onclick='#{@opts[:js_obj]}.select(#{obj.id},\"#{@element}_#{obj.id}\");'>"
        html << @template.send(:render,:partial => @opts[:partial],:locals => { :tree => self, @element.to_sym => obj }).to_s
        html << "</a>"
       # html << self.children(obj,level+1)
        
        html << "</#{@opts[:leaf_tg]}>\n"
      end
        
    end

    def children(object,level=1,wrap=true)
      returning html = '' do
        html << "<#{@opts[:tg]} id='#{@element}_#{object.id}_children' class='#{@opts[:branch_clss]}'>" if wrap
        # First time around we already have an array of objects
        objects = wrap ?  object.send(@opts[:children]) : object
        objects.each do |obj|
          html << self.child(obj,level)
        end
        html << "</#{@opts[:tg]}>" if wrap
      end
    end
  end

  
  
  def flat_view(element,objects,options = {})
    options = options.symbolize_keys

    builder_opts = {}
    builder_opts[:tg]  = options.delete(:tag) || "ul"
    builder_opts[:leaf_tg] = options.delete(:leaf_tag) || ( builder_opts[:tg] == 'ul' ? 'li' : 'div' )
    builder_opts[:clss] = options.delete(:class_name) || "active_tree"
    builder_opts[:leaf_clss] = options.delete(:leaf_class_name) || (builder_opts[:clss] + "_leaf")
    builder_opts[:wrapper_clss] = options.delete(:wrapper_class_name) || (builder_opts[:clss] + "_line")
    builder_opts[:branch_clss] = options.delete(:branch_class_name) || (builder_opts[:clss] + "_branch")
    builder_opts[:leaf_content_clss] = options.delete(:leaf_content_class_name) || (builder_opts[:clss] + "_leaf_content")
    builder_opts[:children] = options.delete(:children) || 'children'
    
    builder_opts[:js_obj] = options.delete(:javascript) || "#{element}_tree".classify

    builder_opts[:partial] = (options.delete(:partial) || element).to_s

    html = "<#{builder_opts[:tg]} id='#{element}_tree' class='#{builder_opts[:clss]} #{builder_opts[:branch_clss]}'>"

    tree = ActiveTreeBuilder.new(element,self,builder_opts)

    html << tree.children(objects,1,false)
    html << <<-HTML

</#{builder_opts[:tg]}>
<script>
      var #{element}_tree = Droppables.add('columned_table',{
          hoverclass: 'hoverActive',
          accept: 'new_page',
          onDrop: moveItem
         }
     );

function moveItem(new_page,columned_table){
   if (!columned_table.cleared) {
      columned_table.innerHTML = '';
      columned_table.cleared = true;
   }
   new_page.parentNode.removeChild(new_item);
   columned_table.appendChild(new_item);
}


         

      
      #{element}_tree.Droppable();

     

       
    
  
    $$('ul.active_tree li span.toggle').each(function(element){
      Event.observe(element, 'click', ActiveTree.toggleFolder);
    });



</script>
HTML
    
  end



end
